{"version":3,"sources":["logo.svg","components/Navigation.js","components/Button.js","components/OrderedItem.js","components/Order.js","components/Dishes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navigation","react_default","a","createElement","className","src","logo","alt","href","toUpperCase","Component","Button","props","vatiant","onClick","label","OrderedItem","_this","this","removeItem","index","title","price","components_Button","Order","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","mesa","cliente","handleInput","bind","assertThisInitialized","handleSubmit","e","_e$target","target","value","name","setState","defineProperty","preventDefault","console","log","onSubmit","type","placeholder","onChange","components_OrderedItem","Dishes","menu","dishes","map","dish","i","key","components_Order","App","components_Navigation","components_Dishes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ebc868d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n// import Dishes from './Dishes';\r\n// import Drinks from './Drinks';\r\n// import Toppings from './Toppings';\r\nimport logo from '../logo.svg';\r\n\r\nclass Navigation extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n      <img src={logo} className=\"App-logo\" alt=\"Pomelo-logo.png\" />\r\n      <a href=\"Dishes\" className=\"text-white\">\r\n      {\"Platillos\".toUpperCase()}\r\n      </a>\r\n      <a href=\"Toppings\"className=\"text-white\">\r\n      {\"Toppings\".toUpperCase()}\r\n      </a>\r\n      <a href=\"Drinks\" className=\"text-white\">\r\n      {\"Bebidas\".toUpperCase()}\r\n      </a>\r\n      </nav>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\n\r\nconst Button = (props) => {\r\n    return <button\r\n      vatiant=\"primary\"\r\n      className={props.className}\r\n      onClick={props.onClick}>\r\n      {props.label}\r\n      </button>\r\n}\r\n\r\nexport default Button\r\n","import React, {Component} from 'react';\r\nimport Button from './Button';\r\n\r\nclass OrderedItem extends Component {\r\n  render() {\r\n    return (\r\n      <span\r\n      className=\"orderedItem\"\r\n      onClick={() => this.props.removeItem(this.props.index)}>\r\n      {this.props.title} - ${this.props.price}\r\n      <Button className=\"closeBtn\" label=\"x\"/>\r\n      </span>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OrderedItem\r\n","import React, {Component} from 'react';\r\nimport OrderedItem from './OrderedItem';\r\nimport Button from './Button';\r\n\r\nclass Order extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      mesa: '',\r\n      cliente: ''\r\n    };\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleInput(e) {\r\n    const {value, name} = e.target;\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    // this.props.addToOrder(this.state);\r\n    console.log(this.state);\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"order\">\r\n        <form className=\"card-body\" onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <input\r\n            type=\"text\"\r\n            name=\"mesa\"\r\n            className=\"form-control\"\r\n            placeholder=\"Mesa\"\r\n            onChange={this.handleInput}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n            type=\"text\"\r\n            name=\"cliente\"\r\n            className=\"form-control\"\r\n            placeholder=\"Cliente\"\r\n            onChange={this.handleInput}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <div\r\n            type=\"text\"\r\n            name=\"orden\"\r\n            className=\"form-control\"\r\n            >\r\n            <OrderedItem/>\r\n            </div>\r\n          </div>\r\n          <Button className=\"btn orderBtn\" label=\"Listo\"/>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Order\r\n","import React, { Component } from 'react';\r\nimport Order from './Order';\r\nimport {menu} from '../menu.json';\r\n// import {orders} from '../orders.json';\r\n\r\nclass Dishes extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        menu\r\n      };\r\n      // this.handleAddToOrder = this.handleAddToOrder.bind(this);\r\n    }\r\n    // handleAddToOrder(orders) {\r\n    //   let order = {\"title\": \"\", \"price\": \"\", \"value\":0}\r\n    //   this.setState = {\r\n    //     orders\r\n    //   }\r\n    //   this.state({\r\n    //     orders: [...this.state.orders, order]\r\n    //   })\r\n    // }\r\n    //failed onClick\r\n  // <dl className=\"card\" key={i} onClick={this.props.addToOrder.bind(this)}>\r\n    render() {\r\n      // console.log(this.state.menu.dishes);\r\n      const dishes = this.state.menu.dishes.map((dish, i) => {\r\n        return (\r\n          <dl className=\"card\" key={i}>\r\n            <dt className=\"card-header\">\r\n              <h3>{dish.title}</h3>\r\n            </dt>\r\n            <dt className=\"card-body\">\r\n              <p>{dish.price}</p>\r\n            </dt>\r\n          </dl>\r\n        )\r\n      });\r\n      return (\r\n        <section className=\"menuSection\">\r\n          <div className=\"container dishes\">\r\n              {dishes}\r\n          </div>\r\n          <Order/>\r\n        </section>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Dishes\r\n","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Navigation from './components/Navigation';\nimport Dishes from './components/Dishes';\n// import MenuButton from './components/MenuButton';\n// import Order from './components/Order';\n// import {menu} from './menu.json';\n\nclass App extends Component {\n  //We can skip super() or even the whole constructor() and you can write directly state = {}\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     menu\n  //   }\n  // }\n  //updateExample = () => {\n    //this.setState({ object: value });\n  //}\n  //<Button name=\"Your botton action\" action={this.updateExample} />\n\n  //state = {\n  //color: 'blue'\n  //}\n  //updateBackgroundColor = (color) => {\n    //this.setState({ color: color });\n  //}\n  //<Button name=\"change to red\" action={() => this.updateBackgroundColor('red')} />\n  //<Button name=\"change to yellow\" action={() => this.updateBackgroundColor('yellow')} />\n\n  //state = {\n  //color: 'blue',\n  //basicColor: 'blue'\n  //}\n  //updateBackgroundColor = (color) => {\n    //if (this.state.color === 'blue') {\n    //this.setState({ color: color });\n    //return;\n    //} else {\n    //this.setState({ color: 'blue' });\n    //}\n  //}\n  //<Button name=\"change to red\" action={() => this.updateBackgroundColor('red')} />\n  //<Button name=\"change to yellow\" action={() => this.updateBackgroundColor('yellow')} />\n\n\n  // handleAddOrder(dish, topping, drink) {\n  //   this.state({\n  //     menu: [...this.state.menu, ]\n  //   })\n  // }\n\n// const props = this.props; //declares props in a class kind Component\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <Navigation/>\n        </header>\n        <Dishes/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}